#
# note: in order to use these macros we must add some mine_functions:
#       network.default_route, network.interfaces
#

{# given an 'iface' (and an optional 'host' and list of 'ifaces'), #}
{# return the IP address associated with 'iface' #}
{% macro get_iface_ip(iface) -%}
  {%- set host = kwargs.pop('host', salt['grains.get']('id')) -%}
  {%- set ifaces = kwargs.pop('ifaces', salt['mine.get'](host, 'network.interfaces')[host]) -%}
  {{- ifaces.get(iface).get('inet', [{}])[0].get('address') -}}
{%- endmacro %}

{# (given some optional 'host') #}
{# return the name of the primary iface (the iface associated with the default route) #}
{% macro get_primary_iface() -%}
  {%- set host = kwargs.pop('host', salt['grains.get']('id')) -%}
  {{- salt['mine.get'](host, 'network.default_route')[host][0]['interface'] -}}
{%- endmacro %}

{# (given an optional minion 'host' and a list of its network interfaces, 'ifaces'), #}
{# return the primary IP #}
{% macro get_primary_ip() -%}
  {{- get_iface_ip(get_primary_iface(**kwargs), **kwargs) -}}
{%- endmacro %}

{# given a compound expression 'compound', return the primary IPs for all the #}
{# nodes that match that expression #}
{% macro get_primary_ips_for(compound) -%}
  {%- set res = [] -%}
  {%- for host in salt['mine.get'](compound, 'network.interfaces', expr_form='compound').keys() -%}
    {%- do res.append(get_primary_ip(host=host)) -%}
  {%- endfor -%}
  {{- res -}}
{%- endmacro %}
